SPØRG Casper ang. runde/tur

- er en tur == rød runde og blå runde ||  rød tur og blå tur.
- ant emma?

Tests:

== Players ==

Red is the first player in turn
Test: redShouldBeFirstInTurn()

After red, blue player is in turn
Test: afterRedBlueShouldBeInTurn()

After blue, red player is in turn
Test: afterBlueRedShouldBeInTurn()

== World Layout ==

Ocean tile at (1,0)
Test: shouldHaveOceanAt1_0()

Plains everywhere else
Test: worldShouldHavePlainsEverywhereElse()

Mountain tile at (2,2)
Test: shouldHaveMountainAt2_2()

Hills tile at (0,1)
Test: shouldHaveHillAt0_1()

== Units ==

Red settler at tile(4.3)
Test: shouldInitiallyBeRedArcherAt2x0()

Blue legion at tile(3,2)
Test: shouldInitiallyBeBlueLegionAt3x2()

Red archer at tile(2,0)
Test: shouldInitiallyBeRedSettlerAt4x3()

A unit has a max movement of one
Test: unitsCanMoveOneTile()

Units can at max move 1 tile per turn
Test: unitCanMove1tilePerTurn()

Red should not be able to move Blue's units
Test: redShouldNotBeAbleToMoveBlueUnits()

Blue should not be able to move Red's units
Test: blueshouldNotBeAbleToMoveRedUnits()

Units cannot move over mountain tile
Test: unitCannotMoveOverMountain()

Units cannot move over ocean tile
Test: unitCannotMoveOverOcean()

The unit at (2,0) (archer, red) cannot move to the ocean tile at (1,0)
Test: archerAt2_0CannotMoveToOceanTileAt1_0()

Units can be moved to an empty plains tile
Test: archerCanMoveToEmptyPlainTile()

A move should result in changed position and the unit remains the same type/owner, testing movement of archer from (2,0) to (3,0)
Test: typeAndOwnerRemainsUnchangedAfterMovement()

== Combat ==

Red's unit attacks and destroys Blue's unit
Test: redUnitAttacksAndDestroysBlueUnit()

Blue's unit attacks and destroys Red's unit
Test: blueUnitAttacksAndDestroysRedUnit()

Red should not be able not attack own units
Test: redShouldNotBeAbleToAttackOwnUnit()

== Cities ==

Choose what unit a city should produce
Test: chooseCityProduction

City population stays at 1
Test: cityPopulationRemainsAtOne()

City population should initially be 1
Test: cityPopulationStartsAtOne()

Cities produces 6 production after end of round
Test: citiesProduce6ProductionAfterEndOfEachRound

After 2 turns cities should have produced 12 production with nothing in
production
Test: after2RoundsCitiesShouldHave12ProductionWithNothingInProduction

Setting city production tresuary to 100 it should return 100
Test: shouldReurn100WhenSetProductionTo100()

Setting city production tresuary to 200 it should return 2x100
Test shouldReturn200AfterSetof2x100()

Red has a city at tile(1,1)
Test: shouldHaveRedCityAt1_1()

Blue has a city at tile(4,1)
Test: shouldHaveBlueCityAt4_1()

Game can place a red archer once there is enough production in city at (1,1)

Game can place a blue legion once there is enough production in city at (4,1)

== Aging ==

Game starts at 4000 bc
Test: gameStartsAt4000bc()

Game ages 100 years per turn
Test: shouldAdvanceTimeBy100AtEndOfFirstRound

After turn 5 the year is 3500 bc
Test: after5TurnsGameTineShouldBe3500BC()

Units regain the ability to move after each round: setting unit move to 1
Test: unitCanMove1tileAfterTurn()

== Win ==

Red should be the winner
Test: redShouldWin


